; Algoritmo copiador de binarios


; el estado 30 es el inicial
; si ve un 1 lo reemplaza por x y se mueve a la derecha pasando
; al estado 31, 
; si ve un 0 lo transforma en una y y se mueve a la derecha, yendose
; al estado 34.
; si ve un blanco, pone un signo $ y se va a al estado 100, moviendose
; a la derecha, terminando el algoritmo de copiar binario. El signo $
; sirve para separar el numero original del numero copiado

30 1 x r 31
30 0 y r 34
30 _ $ r 100

; el estado 31 es un estado que recorre el numero binario original,
; de izquierda a derecha, cuando termina de leer el numero (sin modificarlo)
; lo hace viendo un blanco, pasando al estado 32 el cual entra a copiar el digito
; binario en la copia
31 1 * r 31
31 0 * r 31
31 _ * r 32

; el estado 32 se mueve a la derecha hasta ver un blanco, en ese caso coloca un 1
; y se empieza a mover a la izquierda, pasando al estado 33
32 _ 1 l 33
32 1 * r 32
32 0 * r 32

; el estado 33 recorre el numero copiado y el original hacia la izquierda hasta ver una x o una y, en 
; donde fue marcado el numero copiado, si ve una x vuelve a colocar un 1, si ve una y entonces coloca
; un 0 y pasa al estado inicial, para repetir el proceso
33 0 * l 33
33 1 * l 33
33 _ * l 33
33 x 1 r 30
33 y 0 r 30

; el estado 34 recorre el numero original hacia la derecha, hasta llegar a un blanco, en ese
; caso pasa al estado 35 y se sigue moviendo a la derecha
34 1 * r 34
34 0 * r 34
34 _ * r 35

; el estado 35 recorre el numero copiado hacia la derecha sin modificarlo, hasta llegar a un blanco
; en ese momento reemplaza el blanco por un 0 y salta al estado 33, moviendose a la izquierda
35 _ 0 l 33
35 1 * r 35
35 0 * r 35

; en el estado 100 ya se copio el numero binario, por lo que se prosigue a recorrer el numero copiado
; hacia su extremo derecho, al momento de encontrarse un blanco coloca un # para marcar el final, y se
; mueve a la izquierda, pasando al estado 101
100 1 * r 100
100 0 * r 100
100 _ # l 101

; en el estado 101 se recorre el numero binario copiado hacia la izquierda hasta llegar a un blanco, 
; en ese caso se pasa al estado 0 y se mueve a la derecha. 
; si se topa con un signo $, pasa al estado 57 y se mueve a la izquierda
101 1 * l 101
101 0 * l 101
101 _ * r 0
101 $ * l 57

; en este estado la maquina se encuentra dentro del numero original, el cual no
; debe ser modificado, por lo que se recorre hasta llegar al blanco o al signo $ del 
; extremo izquierdo, en donde se pasa al estado 101.
57 1 * l 57
57 0 * l 57
57 _ $ l 101
57 $ * l 101


; Algoritmo para transfomar binario a unario


; en el estado 0 inicialmente nos encontramos al extremo izquierdo del numero binario a transformar
; si ve un 1 entonces transformar a 0 y pasar al estado 5, moviendose a la derecha
; si ve un 0 entonces borrarlo, pasar al estado 5 y moverse a la derecha
; si ve un # es porque ya termino de transformar el numero binario y se pasa al estado 11
; si ve un signo $ es porque esta entrando en zona protegida (numero original), 
; pasando al estado 58
0 0 _ r 1
0 1 0 r 5
0 # _ r 11
0 $ * r 58

; este estado simplemente recorre el numero original sin modificarlo, hacia la derecha,
; hasta encontrar el signo $ que marca su final, pasando al estado 0 nuevamente.
58 1 * r 58
58 0 * r 58
58 $ * r 0

; en este estado se recorre hacia la derecha el numero binario copiado, hasta encontrar un #
; en donde se pasa al estado 2
1 # * r 2
1 1 * r 1
1 0 * r 1

; en este estado se transforman los 1 en A's del número unario. 
; cuando se llega al final el numero unario se ve un blanco, y se pasa al estado 3
; moviendose a la izquierda
2 1 A r 2
2 _ * l 3

; en el estado 3 se transforman las A's en dos 1's, pasando al estado 4
; si ve un blanco, pasa al estado 0 y se mueve a la derecha
; si ve un 1 , se sigue moviendo a la izquierda
; si ve un # es porque ya termino de leer el numero unario, pasando al estado 8
; y moviendose al estado 8
3 A 1 r 4
3 _ * r 0
3 1 * l 3
3 # * l 8

; en el estado 4, si se ve un blanco, se deja un 1 y se pasa al estado 3, 
; moviendose a la izquierda
; si se ve un 1 se sigue moviendo hacia la derecha
4 _ 1 l 3
4 1 * r 4

; en el estado 5 se recorre el numero binario hacia la derecha sin modificar
; hasta llegar al #, en donde se pasa al estado 6
5 1 * r 5
5 0 * r 5
5 # * r 6

; en el estado 6 se recorre el numero unario hasta la derecha, si
; se ve un blanco se coloca un 1 y se pasa al estado 7
6 1 * r 6
6 _ 1 l 7

; en el estado 7 se recorre el numero binario hacia la izquierda, hasta llegar a un #.
; en ese caso se pasa al estado 8 moviendose a la izquierda
; si ve un signo $ se pasa al estado 59 moviendose a la izquierda
7 1 * l 7
7 # * l 8
7 0 * l 7
7 _ * r 0
7 $ * l 59

; el estado 59 es para proteger el numero original, por lo que se recorre 
; hacia la izquierda sin modificar hasta llegar al próximo signo $
59 1 * l 59
59 0 * l 59
59 $ * l 7

; en el estado 8, si se ve un 0 se pasa al estado 9 y se mueve a la izquierda,
; si ve un 1 se mueve a la izquierda y pasa al estado 7
8 0 * l 9
8 1 * l 7

; en el estado 9 si se ve un blanco se pasa al estado 10 y se mueve a la derecha
; si ve un 1 o 0 se mueve a la izquierda y pasa al estado7
9 _ * r 10
9 1 * l 7
9 0 * l 7

; en el estado 10 si ve un 0 lo borra y se mueve a la derecha,
; pasando al estado 0
10 0 _ r 0


; Algoritmo para obtener raiz cuadrada de un numero unario


; en el estado 11 se recorre el numero unario hacia la izquierda
; hasta encontrar un blanco, en donde se pasa al estado 12 y se mueve a la izquierda
11 1 1 l 11
11 _ _ l 12

; en el estado 12 si ve un blanco se pone un 1, se mueve a la derecha y pasa al estado 16
12 _ 1 r 16

; en el estado 13 se mueve hacia la izquierda mientras lea x, 
; si lee un blanco entonces pone un 1 y pasa al estado 17
; si lee un 1 entonces lo marca con 'x' y se mueve a la derecha pasando al estado 14
; si lee un signo $ pasa al estado 52
13 _ 1 l 17
13 x x l 13
13 1 x r 14
13 $ * l 52

; en el estado 52 se recorre hacia la izquierda sin modificar el numero original hasta llegar
; al signo $, en donde se pasa nuevamente al estado 13
52 1 * l 52
52 0 * l 52
52 _ $ l 13
52 $ * l 13

; en el estado 14 se recorre hacia la derecha mientras vea x hasta
; ver un blanco, en donde salta al estado 15 moviendose a la derecha
; si ve un signo $ pasa al estado 56
14 x x r 14
14 _ _ r 15
14 $ * r 56

; en el estado 56 se recorre hacia la derecha el numero original sin modificarlo,
; hasta encontrar el siguiente signo $, saltando al estado 14 nuevamente
56 1 * r 56
56 0 * r 56
56 $ * r 14

; en el estado 15 se recorre hacia la derecha mientras vea x,
; si ve un 1 entonces pone una x, se mueve a la izquierda y pasa al estado 16
; si ve un blanco entonces pasa al estado 19 y se mueve a la izquierda
15 x x r 15
15 1 x l 16
15 _ _ l 19

; en el estado 16 se recorre hacia la izquierda mientras vea x, 
; si ve blanco se mueve a la izquierda y pasa al estado 13
16 x x l 16
16 _ _ l 13 

; en el estado 17 si ve blanco se reemplaza por un 1 y se mueve
; a la derecha saltando al estado 18
; si ve un signo $ se pasa al estado 60
17 _ 1 r 18
17 $ * l 60

; en el estado 60 se recorre hacia la izquierda el numero original
; hasta el siguiente signo $, volviendo al estado 17
60 1 * l 60
60 0 * l 60
60 $ * l 17

; en el estado 18 se recorre hacia la derecha mientras vea 1's
; si ve una x se pone un 1 y se sigue moviendo a la derecha
; si ve blanco, entonces pasa al estado 13 y se mueve a la izquierda
; si ve el signo $, pasa al estado 53
18 1 1 r 18
18 x 1 r 18
18 _ _ l 13 
18 $ * r 53

; en el estado 60 se recorre hacia la derecha el numero original
; hasta el siguiente signo $, volviendo al estado 18
53 1 * r 53
53 0 * r 53
53 $ * r 18

; en el estado 19 se remueven todas las x leidas hacia la izquierda
; hasta llegar al blanco, reemplazandolo por un 1 y moviendose a la izquierda
19 x _ l 19
19 _ 1 l 20

; el numero que se tiene es 2n+1, entonces se debe transformar a n para
; obtener la raiz
; si se ve un blanco se mueve hacia la izquierda,
; si se ve una x, la borra y se mueve hacia la izquierda y se salta al estado 21
; si ve un 1 lo borra y se mueve a la izquierda y salta al estado 21
; si ve signo $, se pasa al estado 55
20 _ _ l 20
20 x _ l 21
20 1 _ l 21
20 $ * l 55

; en el estado 55 se recorre hacia la izquierda el numero original
; hasta el siguiente signo $, volviendo al estado 20
55 1 * l 55
55 0 * l 55
55 $ * l 20

; en el estado 21, si ve una x, se borra y se mueve a la derecha
; saltando al estado 22
; si ve un 1, se borra y salta al estado 22 yendo a la derecha 
; si ve blanco, salta al estado 25
; si ve un signo $, pasa al estado 50
21 x _ r 22
21 1 _ r 22
21 _ _ r 25
21 $ * l 50

; en el estado 50 se recorre hacia la izquierda el numero original
; hasta el siguiente signo $, volviendo al estado 21
50 1 * l 50
50 0 * l 50
50 _ $ l 21
50 $ * l 21

; en el estado 51 se recorre hacia la derecha el numero original
; hasta el siguiente signo $, volviendo al estado 25
51 1 * r 51
51 0 * r 51
51 $ * r 25

; en el estado 22, si ve blanco
; se sigue moviendo a la derecha
; si ve 1, salta al estado 23
; si ve el signo $, pasa al estado 54
22 _ _ r 22
22 1 1 r 23
22 $ * r 54

; en el estado 54 se recorre hacia la derecha el numero original
; hasta el siguiente signo $, volviendo al estado 22
54 1 * r 54
54 0 * r 54
54 $ * r 22

; en el estado 23 se mueve hacia la derecha mientras vea 1's
; si ve un blanco escribe 1 y pasa al estado 24
23 1 1 r 23
23 _ 1 l 24

; en el estado 24 se mueve hacia la izquierda mientras vea 1's
; si ve un blanco pasa al estado 20
24 1 1 l 24
24 _ _ l 20

; en el estado 25, se mueve hacia la derecha mientras vea blancos
; si ve un 1, lo borra y pasa al estado 26
; si ve un signo $, pasa al estado 51
25 _ _ r 25
25 1 _ r 26
25 $ * r 51


; Algoritmo para transformar de unario a binario


; en el estado 26, si ve un 1 escribe un X y pasa al estado 27
; si ve un blanco pasa al estado 28
; si ve una X pasa al estado 26
26 1 X l 27
26 _ * l 28
26 X * r 26

; en el estado 27, si ve un 1 escribe un 0 y se sigue moviendo a la izquierda
; si ve un 0 escribe un 1 y pasa al estado 29
; si ve un blanco escribe un 1 y pasa al estado 29
; si ve una X se sigue moviendo hacia la izquierda
27 1 0 l 27
27 0 1 r 29
27 _ 1 r 29
27 X * l 27

; en el estado 28 se borran las X moviendose hacia la izquierda
; si ve un 1 o un 0 se detiene y termina el algoritmo
28 X _ l 28
28 1 * * halt
28 0 * * halt

; en el estado 29 se mueve hacia la derecha si ve 1 o 0
; si ve una X salta al estado 26
29 1 * r 29
29 0 * r 29
29 X * r 26